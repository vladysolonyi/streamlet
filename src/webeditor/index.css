@import url("./xy-theme.css");

html,
body {
  margin: 0;
  font-family: sans-serif;
  box-sizing: border-box;
}

#app {
  width: 100vw;
  height: 100vh;
}

.dndflow {
  flex-direction: column;
  display: flex;
  flex-grow: 1;
  height: 100%;
}

.dndflow aside {
  border-right: 1px solid #eee;
  padding: 15px 10px;
  font-size: 12px;
  background: #fcfcfc;
}

.dndflow aside .description {
  margin-bottom: 10px;
}

.dndflow .dndnode {
  height: 20px;
  padding: 4px;
  border: 1px solid #1a192b;
  border-radius: 2px;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: grab;
}

.dndflow .dndnode.input {
  border-color: #0041d0;
}

.dndflow .dndnode.output {
  border-color: #ff0072;
}

.dndflow .reactflow-wrapper {
  flex-grow: 1;
  height: 100%;
}

.dndflow .selectall {
  margin-top: 10px;
}

.custom-node {
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 10px;
  width: 250px;
}

.node-header {
  font-weight: bold;
  margin-bottom: 10px;
  position: relative;
}

.node-body {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.node-param label {
  display: block;
  font-size: 0.9em;
  margin-bottom: 4px;
  color: #666;
}

.node-input {
  width: 100%;
  padding: 4px;
  border: 1px solid #ddd;
  border-radius: 3px;
  font-size: 0.9em;
}

@media screen and (min-width: 768px) {
  .dndflow {
    flex-direction: row;
  }

  .dndflow aside {
    width: 20%;
    max-width: 250px;
  }
}

/* 1) The wrapper: gives us extra space for our “border” */
.status-border-wrapper {
  position: relative;
  display: inline-block; /* shrink‑wrap to node width */
  padding: 4px; /* space for the colored background */
  border-radius: 8px;
  /* make sure the pseudo sits under the node */
  z-index: 0;
}

/* 2) The pseudo-element does the fade */
.status-border-wrapper::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: inherit;
  opacity: 0;
  pointer-events: none;
}

/* 3) Only when “active” do we run the animation */
.status-border-wrapper.active::before {
  animation-duration: 0.2s;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}

/* 4) GREEN fade */
.status-border-wrapper.green.active::before {
  background-color: rgba(0, 128, 0, 0.3); /* deep-ish green */
  animation-name: fadeGreen;
}

/* 5) RED fade */
.status-border-wrapper.red.active::before {
  background-color: rgba(255, 0, 0, 0.3); /* mid red */
  animation-name: fadeRed;
}

/* 6) YELLOW fade */
.status-border-wrapper.yellow.active::before {
  background-color: rgba(255, 255, 0, 0.3); /* bright yellow */
  animation-name: fadeYellow;
}

/* 7) Shared fade keyframes */
@keyframes fadeGreen {
  0%,
  100% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}
@keyframes fadeRed {
  0%,
  100% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}
@keyframes fadeYellow {
  0%,
  100% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}

.react-flow__node {
  overflow: visible !important;
  border-radius: 0;
  padding: 0;
  border: none !important;
  box-shadow: none !important;
}

.react-flow__node.selected {
  overflow: visible !important;
  border-radius: 0;
  padding: 0;
  border: none !important;
  box-shadow: none !important;
}

.react-flow__node:hover {
  overflow: visible !important;
  border-radius: 0;
  padding: 0;
  border: none !important;
  box-shadow: none !important;
}
