import "./chunk-DFKQJ226.js";

// node_modules/vite-plugin-fs/lib/abstraction/index.mjs
import { activePort } from "virtual:fs";
var url = `http://localhost:${activePort}`;
var textDecoder = new TextDecoder();
async function readdir(path, withFileTypes) {
  const res = await fetch(`${url}/${path}?cmd=readdir${withFileTypes ? "&withFileTypes=true" : ""}`);
  if (res.status !== 200) {
    throw new Error(await res.text());
  }
  if (withFileTypes) {
    return await res.json();
  }
  return await res.json();
}
async function readFile(path) {
  const res = await fetch(`${url}/${path}?cmd=readFile`);
  if (res.status === 200) {
    const data = await res.text();
    return data;
  }
  throw new Error(await res.text());
}
async function stat(path) {
  const res = await fetch(`${url}/${path}?cmd=stat`);
  if (res.status === 200) {
    const data = await res.json();
    return data;
  }
  throw new Error(await res.text());
}
async function writeFile(path, data) {
  await fetch(`${url}/${path}?cmd=writeFile`, {
    method: "POST",
    headers: { "Content-Type": "text/plain" },
    body: typeof data === "string" ? data : textDecoder.decode(data)
  });
}
async function rm(path, options) {
  const res = await fetch(`${url}/${path}?cmd=rm${(options == null ? void 0 : options.recursive) ? "&recursive=true" : ""}${(options == null ? void 0 : options.force) ? "&force=true" : ""}`, {
    method: "DELETE"
  });
  if (res.status === 200) {
    return;
  }
  throw new Error(await res.text());
}
var fs = {
  readdir,
  readFile,
  stat,
  writeFile,
  rm
};
var abstraction_default = fs;
export {
  abstraction_default as default
};
//# sourceMappingURL=vite-plugin-fs_browser.js.map
